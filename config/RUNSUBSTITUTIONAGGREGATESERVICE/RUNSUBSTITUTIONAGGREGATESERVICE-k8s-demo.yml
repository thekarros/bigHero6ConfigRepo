eureka:
  client:
    serviceUrl:
      defaultZone: ${eureka.instances}

management.security.enabled: false
management.endpoints.enabled-by-default: true
management.endpoints.web.exposure.include: "*"
management.endpoints.web.base-path: /
management.health.defaults.enabled: true



# DB Configs
kafka-broker: ${kafka-list-servers}
spring.cloud.stream.bindings:
  inputDD:
    destination: run-sub-es-results-p01usw2demo
    group: latestRead
  inputRA:
    destination: changeRouteAssignment-p01usw2demo
  outputRA:
    destination: raKtable-p01usw2demo
  inputRO:
    destination: run-sub-ro-results-p01usw2demo
  outputRO:
    destination: roKtable-p01usw2demo
  roTable:
    destination: roKtable-p01usw2demo
  raTable:
    destination: raKtable-p01usw2demo
  inputRaWithRoKtable:
    destination: raroKtable-p01usw2demo
  outputRaWithRoKtable:
    destination: raroKtable-p01usw2demo
  inputRAJoinRO:
    destination: raroKtable-p01usw2demo  
  outputRAJoinRO:
    destination: run-agg-results-raw-p01usw2demo  
  outputJoinedResults:
    destination: run-agg-results-raw-p01usw2demo     

spring.cloud.stream.kafka.streams.bindings:
  inputDD:
    consumer: 
      applicationId: dd-p01usw2demo
  inputRA:
    consumer: 
      applicationId: ra-p01usw2demo
  inputRO:
    consumer: 
      applicationId: ro-p01usw2demo
  
      
  raTable:
    consumer:
      materializedAs: routeAssignmentsStore  
      applicationId: raKtable-p01usw2demo
      keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
      valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
  roTable:
    consumer: 
      applicationId: roKtable-p01usw2demo
      keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
      valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde            
  inputRaWithRoKtable:
    consumer: 
      applicationId: raroKtable-p01usw2demo
      keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
      valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
  inputRAJoinRO:
    consumer: 
      applicationId: raroUpdateOutput-p01usw2demo
      keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
      valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde    
       
spring:
  cloud:
    config:
      allowOverride: true
      overrideNone: true
      overrideSystemProperties: true
                   
spring.cloud.stream.kafka.streams:
  binder:
    brokers: ${kafka-broker} #localhost #192.168.99.100
    applicationId: run-substitution-aggregate-service-demo
    configuration:
      default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      commit.interval.ms: 1000
      auto.offset.reset: earliest
      num:
        stream:
          threads: 3
      
raScore: 1        
current-version: 
  version: version1
  config:
    coefficient-dd: 1
    coefficient-ro: 1
    coefficient-ra: 1 